# -*- coding: utf-8 -*-
"""Uber Ride Clustering.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nmFGGo6ojkhrAk8RH5jwtsJ-F3ZcHSAm

# BASICS
"""

import numpy as np
import sklearn.cluster

data = np.arange(0, 100)

data = list(zip(data, data))

data

from sklearn.cluster import KMeans

model = KMeans(n_clusters=3, init='random', max_iter=50)

model.fit(data)

model.cluster_centers_



"""# Uber Clustering"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

april = pd.read_csv('/content/drive/MyDrive/PROJECTS/Uber/Datasets/uber-raw-data-apr14.csv')
may = pd.read_csv('/content/drive/MyDrive/PROJECTS/Uber/Datasets/uber-raw-data-may14.csv')
june = pd.read_csv('/content/drive/MyDrive/PROJECTS/Uber/Datasets/uber-raw-data-jun14.csv')
july = pd.read_csv('/content/drive/MyDrive/PROJECTS/Uber/Datasets/uber-raw-data-jul14.csv')
august = pd.read_csv('/content/drive/MyDrive/PROJECTS/Uber/Datasets/uber-raw-data-aug14.csv')
september = pd.read_csv('/content/drive/MyDrive/PROJECTS/Uber/Datasets/uber-raw-data-sep14.csv')

df = pd.concat([april, may, june, july, august, september])

df.head()

df['Date/Time'] = pd.to_datetime(df['Date/Time'], format='%m/%d/%Y %H:%M:%S')

df.head()

df.shape

april['Date/Time'] = pd.to_datetime(april['Date/Time'], format='%m/%d/%Y %H:%M:%S')
may['Date/Time'] = pd.to_datetime(may['Date/Time'], format='%m/%d/%Y %H:%M:%S')
june['Date/Time'] = pd.to_datetime(june['Date/Time'], format='%m/%d/%Y %H:%M:%S')
july['Date/Time'] = pd.to_datetime(july['Date/Time'], format='%m/%d/%Y %H:%M:%S')
august['Date/Time'] = pd.to_datetime(august['Date/Time'], format='%m/%d/%Y %H:%M:%S')
september['Date/Time'] = pd.to_datetime(september['Date/Time'], format='%m/%d/%Y %H:%M:%S')

new_df = [april, may, june, july, august, september, df]

curr_df = new_df[0]

curr_df.head()

curr_df.shape

curr_df['Time'] = curr_df['Date/Time'].dt.time.apply(lambda x: int(x.strftime('%H%M%S')))

curr_df.head()

curr_df['Time'].head()

sns.histplot(curr_df['Time'])

morning_df_idx = (curr_df['Time'] > 50000) & (curr_df['Time'] < 110000)
morning_df = curr_df[morning_df_idx]
evening_df_idx = (curr_df['Time'] > 150000) & (curr_df['Time'] < 220000)
evening_df = curr_df[evening_df_idx]

morning_df.head()

evening_df.head()

morning_coordinates = morning_df[['Lat','Lon']].sample(10000,random_state = 10).values
evening_coordinates = evening_df[['Lat','Lon']].sample(10000,random_state = 10).values

morning_coordinates

evening_coordinates

!pip install folium

import folium

morning_map = folium.Map(location=[40.79658011772687, -73.87341741832425], zoom_start = 12, tiles='Stamen Toner')

morning_map

"""Just for understandings

START

was checking if the map plotting is working or not
"""

location=[40.79658011772687, -73.87341741832425]

folium.Marker(location, icon=folium.Icon(color='red')).add_to(morning_map)

morning_map

"""END 
PS: DON't Run this portion
"""



for coordinate in morning_coordinates:
  folium.CircleMarker(radius=1,location=coordinate,fill=True).add_to(morning_map)

morning_map

evening_map = folium.Map(location=[40.79658011772687, -73.87341741832425], zoom_start = 12, tiles='Stamen Toner')
for coordinate in evening_coordinates:
  folium.CircleMarker(radius=1,location=coordinate,color="#FF0000",fill=True).add_to(evening_map)
evening_map

n_clusters = 6
model = KMeans(n_clusters=n_clusters, init='random', max_iter=300)
model.fit(morning_df[['Lat','Lon']])

morning_centroids = model.cluster_centers_
morning_centroids

for i, coordinate in enumerate(morning_centroids):
    folium.Marker(coordinate, popup='Centroid {}'.format(i+1), icon=folium.Icon(color='red')).add_to(morning_map)
morning_map

"""For evening"""

n_clusters = 6
model = KMeans(n_clusters=n_clusters, init='random', max_iter=300)
model.fit(evening_df[['Lat','Lon']])

evening_centroids = model.cluster_centers_
evening_centroids

for i, coordinate in enumerate(evening_centroids):
    folium.Marker(coordinate, popup='Centroid {}'.format(i+1), icon=folium.Icon(color='blue')).add_to(evening_map)
evening_map

"""For whole dataset"""

n_clusters = 8
model = KMeans(n_clusters=n_clusters, init='random', max_iter=300)
model.fit(curr_df[['Lat','Lon']])

centroids = model.cluster_centers_
centroids

map = folium.Map(location=[40.79658011772687, -73.87341741832425], zoom_start = 12, tiles='Stamen Toner')
for i, coordinate in enumerate(centroids):
    folium.Marker(coordinate, popup='Centroid {}'.format(i+1), icon=folium.Icon(color='blue')).add_to(map)
map

new_ride = (40.70647056912189, -73.91116590442799)
folium.Marker(new_ride, popup='New Rider', icon=folium.Icon(color='green')).add_to(map)
map

centroid_idx = model.predict([new_ride])

centroids[centroid_idx]

folium.Marker(centroids[centroid_idx][0], icon=folium.Icon(color='orange')).add_to(map)
map

